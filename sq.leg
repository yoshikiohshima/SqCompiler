%{
#include <stdio.h>
#include <stdlib.h>

FILE *myfile = NULL;

/*#define YY_INPUT(buf, result, max_size)        \
                  {                                              \
                    int yyc= fgetc(myfile);                          \
                    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1); \
                  }
*/

#define YY_DEBUG

typedef struct _value {
  int type;
  int size;
  union {
    struct _cons {
      struct _value *car;
      struct _value *cdr;
    } cons;
    union {
      char *string;
      int integer;
    } atom;
  } body;
} *value;

#define YYSTYPE value

#define SNULL 0
#define SINTEGER 1
#define SSTRING 2
#define SSYMBOL 3
#define SCONS 4

void PrintList(value a);

value
Value(int type, char *string, int integer)
{
  value v = malloc(sizeof(struct _value));
  v->type = type;
  if (type == SINTEGER) {
    v->size = 0;
    v->body.atom.integer = integer;
  } else if (type == SSTRING || type == SSYMBOL) {
    v->body.atom.string = strdup(string);
    v->size = strlen(string);
  }
  return v;
}

value
Cons(value a, value d)
{
  value v = malloc(sizeof(struct _value));
  v->type = SCONS;
  v->body.cons.car = a;
  v->body.cons.cdr = d;
  return v;
}

value
Copy(value a)
{

  value result;
  if (a->type != SCONS) {
    return a;
  }

  result = malloc(sizeof(struct _value));
  result->type = SCONS;
  result->body.cons.car = Copy(a->body.cons.car);
  result->body.cons.cdr = Copy(a->body.cons.cdr);
  return result;
}

value
String(char *string)
{
  return Value(SSTRING, string, 0);
}

value
Symbol(char *string)
{
  return Value(SSYMBOL, string, 0);
}

value
Integer(int v)
{
  return Value(SINTEGER, NULL, v);
}

int
digitValue(char v)
{
  if ('0' <= v && v <= '9') {
    return v - '0';
  }

  if ('A' <= v && v <= 'Z') {
    return v - 'A' + 10;
  }

  return 0;
}

value
Null()
{
  return Value(SNULL, NULL, 0);
}

value
Append(value a, value d)
{
  value current;
  value tail;

  if (a->type == SNULL) {
    a->type = SCONS;
    a->body.cons.car = d->body.cons.car;
    a->body.cons.cdr = d->body.cons.cdr;
    return a;
  }

  current = a;
  tail = a->body.cons.cdr;

  while (tail->type != SNULL) {
    current = tail;
    tail = tail->body.cons.cdr;
  }
  current->body.cons.cdr = d;
  return a;
}

void
Print(value a)
{
  if (a->type == SCONS) {
    printf("(");
    Print(a->body.cons.car);
    printf(" ");
    PrintList(a->body.cons.cdr);
    printf(")");
  }
  else if (a->type == SINTEGER) {
    printf("%d", a->body.atom.integer);
  } else if (a->type == SSTRING) {
    printf("\"%s\"", a->body.atom.string);
  } else if (a->type == SSYMBOL) {
    printf("#%s", a->body.atom.string);
  }
}

void
PrintList(value a)
{
  if (a->type == SCONS) {
    Print(a->body.cons.car);
    if (a->body.cons.cdr->type != SNULL) {
      printf(" ");
      PrintList(a->body.cons.cdr);
    }
  }
  else if (a->type == SINTEGER) {
    printf(". %d", a->body.atom.integer);
  } else if (a->type == SSTRING) {
    printf(". \"%s\"", a->body.atom.string);
  } else if (a->type == SSYMBOL) {
    printf(". #%s", a->body.atom.string);
  }
}

%}

Start = - s:Expression							     { Print(s); }

Variable = i:Identifier 						     { $$ = Cons(Symbol("variable"), Cons(i, Null()));}

Expression = Integer

#v:Variable Assign u:Variable				     { $$ = Cons (Symbol("assign"), Cons(v, Cons(u, Null()))); }
	   

NewList = {$$ = Value(SNULL, NULL, 0);}

LBrace = '{' -
RBrace = '}' -

LAngle = '<' -
RAngle = '>' -

LParen = '(' -
RParen = ')' -

LBrack = '[' -
RBrack = ']' -

Bar    = '|' -
Hat    = '^' -

Assign  = ('_' | ':=') -

IdentifierCharacter = [a-zA-Z]
IdentifierRest = [a-zA-Z0-9]
IdentifierName = <IdentifierCharacter IdentifierRest*>			     {$$ = String(yytext);}

Identifier = i:IdentifierName -						     {$$ = i;}

Comment = '\"' <(!'\"' .)*> '\"'						     {$$ = String(yytext);}

-     = ([ \t\n\r] | Comment)*

Integer = s:NewInteger b:NewInteger ret:NewInteger
          ('-' {s->body.atom.integer = -1;} | {s->body.atom.integer = 1;})
          (<([0-9][0-9] | [0-9])> 'r' {b->body.atom.integer = atoi(yytext);} | - {b->body.atom.integer = 10;})
          {ret->body.atom.integer = 0}
	  (<[0-9A-Z]>
             {ret->body.atom.integer = ret->body.atom.integer * b->body.atom.integer + digitValue(yytext[0]);})+ - 
	  {$$ = Integer(ret->body.atom.integer * s->body.atom.integer);}
NewInteger = {$$ = Integer(0);}

SingleString = "\'" <(!"\'" .)*> "\'"						{$$ = String(yytext);}

Selector = KeywordSelector | UnarySelector | BinarySelector

UnarySelector = name:IdentifierName !':' - 					{$$ = Symbol(name->body.atom.string);}
BinarySelector = <BinaryCharacter*>	 					{$$ = Symbol(yytext);}
KeywordSelector = ret:NewEmptySymbol (k:KeywordName {strcat(ret->body.atom.string, k->body.atom.string);})+ {ret->size = strlen(ret->body.atom.string); $$ = ret;}
BinaryCharacter = [-+/\\*~<>=@%|&?,`]
NewEmptySymbol = {{char *m = malloc(1000); value v = Symbol(""); memset(m, 0, 1000); v->body.atom.string= m; $$ = v;}}

KeywordName = <(IdentifierName ':')>	   	     		 	      {$$ = String(yytext);}

MessageSend = KeywordSend | BinarySend | UnarySend

BinarySend = r:UnaryArgument

%%

int main()
{
  /*myfile = fopen("test", "r"); */
  while (yyparse())
    ; 
  /* fclose(myfile); */
  return 0;
}
